require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QuestionsController, :type => :controller do
  
  before(:each) do
    @organization = FactoryGirl.create(:organization)
    sign_in @organization.user
  end

  describe "GET index" do
    it "assigns all questions as @questions" do
      question = FactoryGirl.create(:question, :organization => @organization)
      get :index
      assigns(:questions).should eq([question])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Question" do
        expect {
          post :create, {:question => {:question => "Q1?", :input_type => "text"}}
        }.to change(Question, :count).by(1)
      end

      it "assigns a newly created question as @question" do
        post :create, {:question => {:question => "Q1?", :input_type => "text"}}
        assigns(:question).should be_a(Question)
        assigns(:question).should be_persisted
      end

      it "redirects to the questions index page" do
        post :create, {:question => {:question => "Q1?", :input_type => "text"}}
        response.should redirect_to(questions_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved question as @question" do
        # Trigger the behavior that occurs when invalid params are submitted
        Question.any_instance.stub(:save).and_return(false)
        post :create, {:question => {:question => "Q1?", :input_type => "text"}}
        assigns(:question).should be_a_new(Question)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Question.any_instance.stub(:save).and_return(false)
        post :create, {:question => {:question => "Q1?", :input_type => "text"}}
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested question" do
      question = FactoryGirl.create(:question, :organization => @organization)
      expect {
        delete :destroy, :id => question.id
      }.to change(Question, :count).by(-1)
    end

    it "redirects to the questions list" do
      question = FactoryGirl.create(:question, :organization => @organization)
      delete :destroy, :id => question.id
      response.should redirect_to(questions_path)
    end
  end

end
