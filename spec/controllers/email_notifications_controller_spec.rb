require 'spec_helper'
require 'pp'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EmailNotificationsController, type: :controller do
  
  before(:each) do
    user = FactoryGirl.create(:user)
    sign_in user
    @email_notification = user.email_notification
  end
  
  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested email_notification" do
        params = {:id => @email_notification.id, :email_notification => {"proj_approval" => "true"}}
        EmailNotification.any_instance.should_receive(:update_attributes).with(params[:email_notification])
        put :update, params
      end
      
      it "correctly updates the requested email_notification" do
        params = {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        put :update, params
        @email_notification.reload
        expect(@email_notification.proj_approval).to be true
      end

      it "assigns the requested email_notification as @email_notification" do
        put :update, {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        assigns(:email_notification).should eq(@email_notification)
      end

      it "redirects to the user settings page" do
        put :update, {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        expect(response).to redirect_to(edit_user_registration_path)
      end

      it "displays the notice 'Your email notification settings have been successfully updated.'" do
        put :update, {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        expect(flash[:notice]).to eq('Your email notification settings have been successfully updated.')
      end
    end

    describe "with invalid params" do
      it "redirects to the user settings page" do
        # Trigger the behavior that occurs when invalid params are submitted
        EmailNotification.any_instance.stub(:save).and_return(false)
        put :update, {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        expect(response).to redirect_to(edit_user_registration_path)
      end
      
      it "displays the error message 'There was an issue with updating your email notification settings.'" do
        # Trigger the behavior that occurs when invalid params are submitted
        EmailNotification.any_instance.stub(:save).and_return(false)
        put :update, {:id => @email_notification.id, :email_notification => {:proj_approval => true}}
        expect(flash[:warning]).to eq('There was an issue with updating your email notification settings.')
      end
    end
  end

end
